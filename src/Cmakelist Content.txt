# toplevel CMakeLists.txt for a catkin workspace
# catkin/cmake/toplevel.cmake

cmake_minimum_required(VERSION 3.0.2)

project(catkin_ws)

set(CATKIN_TOPLEVEL TRUE)

# search for catkin within the workspace
set(_cmd "catkin_find_pkg" "catkin" "${CMAKE_SOURCE_DIR}")
execute_process(COMMAND ${_cmd}
	  RESULT_VARIABLE _res
	  OUTPUT_VARIABLE _out
	  ERROR_VARIABLE _err
	  OUTPUT_STRIP_TRAILING_WHITESPACE
	  ERROR_STRIP_TRAILING_WHITESPACE
		  )
if(NOT _res EQUAL 0 AND NOT _res EQUAL 2)
	# searching fot catkin resulted in an error
	string(REPLACE ";" " " _cmd_str "${_cmd}")
	message(FATAL_ERROR "Search for 'catkin' in workspace failed (${_cmd_str}): ${_err}")
endif()

#include catkin from workspace or via find_package()
if(_res EQUAL 0)
	set(catkin_EXTRAS_DIR "${CMAKE_SOURCE_DIR}/${_out}/cmake")
	#include all.cmake without add_subdirectory to let it operate in same scope
	include(${catkin_EXTRAS_DIR}/all.cmake NO_POLICY_SCOPE)
	add_subdirectory("${_out}")

else()
# use either CMAKE_PREFIX_PATH explicitly passed to CMake as a command line argumen
#or CMAKE_PREFIX_PATH from the environment
	if(NOT DEFINED CMAKE_PREFIX_PATH)
		if(NOT "$ENV{CMAKE_PREFIX_PATH}" STREQUAL "")
			if(NOT WIN32)
			string(REPLACE ":" ";" CMAKE_PREFIX_PATH $ENV{CMAKE_PREFIX_PATH})
			else()
			set(CMAKE_PREFIX_PATH $ENV{CMAKE_PREFIX_PATH})
			endif()
			endif()
		endif()

	# list of catkin workspaces
	set(catkin_search_path "")
	foreach(path ${CMAKE_PREFIX_PATH})
		if(EXISTS "${path}/.catkin")
		list(FIND catkin_search_path ${path} _index)
		if(_index EQUAL -1)
			list(APPEND catkin_search_path ${path})
			endif()
		endif()
	endforeach()

	#search for catkin in all workspaces
	set(CATKIN_TOPLEVEL_FIND_PACKAGE TRUE)
	find_package(catkin QUIET
		NO_POLICY_SCOPE
		PATHS ${catkin_search_path}
		NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)

	unset(CATKIN_TOPLEVEL_FIND_PACKAGE)

	if(NOT catkin_FOUND)
		message(FATAL_ERROR "find_package(catkin) failed. catkin was neither found in the workspace nor in the CMAKE_PREFIX_PATH. One reason may be that no ROS setup.sh was sourced before.")
	endif()
endif()

catkin_workspace()
#------------------------------------------------------------------------------------------------------
cmake_minimum_required(VERSION 3.0.2)

# Define the project name
project(softactuator)

# Find the Gazebo package
find_package(gazebo REQUIRED)

# Find the required ROS packages
find_package(catkin REQUIRED COMPONENTS 
	roscpp
	#	rospy
	#std_msgs
	#message_generation
		)

# Include Gazebo headers
include_directories(${GAZEBO_INCLUDE_DIRS})

# Include ROS headers
include_directories(${catkin_INCLUDE_DIRS})

# Set the library output path
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Add the plugin source file
#add_library(${PROJECT_NAME} SHARED ~/catkin_ws/src/JointStiffnessPlugin.cpp)


# Link the plugin library against Gazebo and ROS libraries
#target_link_libraries(${PROJECT_NAME} ${GAZEBO_LIBRARIES} ${catkin_LIBRARIES})

#Install the plugin library
#install(TARGETS ${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)

## Generate services in the 'srv' folder
#add_service_files(
#	FILES
#	softactuator/srv/SetJointStiffness.srv
#		)

## Generate added messages and services with any dependencies listed here
#generate_messages(
#	DEPENDENCIES
	#	std_msgs
	#	)
		#catkin_workspace()
#catkin_package(
#	CATKIN_DEPENDS roscpp rospy std_msgs message_runtime
#	)
#catkin_workspace()
#--------------------------------------------------------------------------------------------------------------


